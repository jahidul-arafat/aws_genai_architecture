# tox.ini - Multi-Environment Testing Configuration
[tox]
# Test environments
envlist =
    py{38,39,310,311}
    flake8
    mypy
    black
    coverage
    docs

# Require these Python versions to be available
requires =
    tox>=4.0
    virtualenv>=20.0

# Use isolated builds
isolated_build = True

# Skip missing Python interpreters
skip_missing_interpreters = True

[testenv]
# Dependencies for all test environments
deps =
    pytest>=7.0
    pytest-cov>=4.0
    pytest-mock>=3.10
    pytest-xdist>=3.0
    pytest-sugar>=0.9
    flask-testing>=0.8
    coverage[toml]>=7.0

# Extra dependencies
extras = dev

# Commands to run in each environment
commands =
    pytest tests/ -v --cov=aws_genai_architecture --cov-report=term-missing --cov-report=xml
    coverage report --show-missing

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}
    FLASK_ENV = testing
    COVERAGE_FILE = {envtmpdir}/.coverage

# Change directory for testing
changedir = {toxinidir}

# Pass through environment variables
passenv =
    CI
    GITHUB_*
    CODECOV_*

[testenv:py38]
# Python 3.8 specific settings
basepython = python3.8
deps =
    {[testenv]deps}
    typing_extensions>=4.0

[testenv:py39]
basepython = python3.9
deps = {[testenv]deps}

[testenv:py310]
basepython = python3.10
deps = {[testenv]deps}

[testenv:py311]
basepython = python3.11
deps = {[testenv]deps}

# Code quality environments
[testenv:flake8]
deps =
    flake8>=6.0
    flake8-docstrings>=1.7
    flake8-import-order>=0.18
    flake8-bugbear>=23.0
commands =
    flake8 aws_genai_architecture tests

[testenv:mypy]
deps =
    mypy>=1.4
    types-flask
    types-requests
commands =
    mypy aws_genai_architecture --ignore-missing-imports

[testenv:black]
deps =
    black>=23.0
commands =
    black --check --diff aws_genai_architecture tests

[testenv:isort]
deps =
    isort>=5.12
commands =
    isort --check-only --diff aws_genai_architecture tests

# Coverage environment
[testenv:coverage]
deps =
    {[testenv]deps}
    coverage[toml]>=7.0
commands =
    pytest tests/ --cov=aws_genai_architecture --cov-report=html --cov-report=xml --cov-report=term
    coverage report --show-missing --fail-under=80

# Documentation environment
[testenv:docs]
deps =
    sphinx>=7.0
    sphinx-rtd-theme>=1.3
    myst-parser>=2.0
commands =
    sphinx-build -b html docs docs/_build/html
    sphinx-build -b doctest docs docs/_build/doctest

# Security testing
[testenv:security]
deps =
    bandit>=1.7
    safety>=2.3
commands =
    bandit -r aws_genai_architecture
    safety check

# Performance testing
[testenv:performance]
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0
commands =
    pytest tests/ -v --benchmark-only

# Integration testing
[testenv:integration]
deps = {[testenv]deps}
commands =
    pytest tests/test_web/ tests/test_cli/ -v --cov=aws_genai_architecture

# Fast testing (unit tests only)
[testenv:fast]
deps = {[testenv]deps}
commands =
    pytest tests/test_core/ tests/test_monitoring/ -v -x

# Parallel testing
[testenv:parallel]
deps =
    {[testenv]deps}
    pytest-xdist>=3.0
commands =
    pytest tests/ -n auto -v --cov=aws_genai_architecture

# Clean environment
[testenv:clean]
deps =
skip_install = true
commands =
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('*.egg-info', ignore_errors=True)"

# Flake8 configuration
[flake8]
max-line-length = 88
max-complexity = 10
ignore =
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    F401,  # imported but unused (in __init__.py files)
exclude =
    .git,
    __pycache__,
    build,
    dist,
    .eggs,
    *.egg-info,
    .tox,
    .pytest_cache,
    docs/_build

per-file-ignores =
    __init__.py:F401,F403
    tests/*:S101

# Coverage configuration (for tox environments)
[coverage:run]
source = aws_genai_architecture
branch = true
omit =
    */tests/*
    */test_*
    setup.py
    */venv/*
    */.tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*Protocol.*:
    @abstract

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml